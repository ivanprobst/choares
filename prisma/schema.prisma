// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id           String     @default(uuid()) @id
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  creator      User       @relation(fields: [creatorId], references: [id])
  creatorId    String
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      String
  name         String
  description  String?
  dueDate      DateTime?  @map(name: "due_date")
  completed    Boolean    @default(false)
  completedAt  DateTime?  @map(name: "completed_at")

  @@map(name: "tasks")
}

model Group {
  id           String     @default(uuid()) @id
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  creator      User       @relation(fields: [creatorId], references: [id])
  creatorId    String
  members      GroupMembers[]
  name         String
  tasks        Task[]

  @@map(name: "groups") 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")

}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasksCreated  Task[]
  groupsCreated Group[]
  groupsMember  GroupMembers[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GroupMembers {
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  createdBy    String     @map(name: "created_by")
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  

  @@id([groupId, userId])
  @@map("groupmembers")
}